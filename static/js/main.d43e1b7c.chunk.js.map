{"version":3,"sources":["components/Dropdown/Dropdown.js","components/DatePicker/DatePicker.js","style/theme.js","App.js","serviceWorker.js","index.js"],"names":["Dropdown","props","state","chosenName","options","this","valKey","displayKey","handleChange","className","FormControl","fullWidth","InputLabel","htmlFor","Select","native","onChange","event","setState","target","value","map","el","key","React","Component","DatePicker","selectedDate","Date","label","utils","DateFnsUtils","disablePast","margin","id","format","isValid","KeyboardButtonProps","appBarTheme","createMuiTheme","palette","primary","purple","secondary","green","status","danger","overrides","MuiAppBar","root","padding","fontWeight","marginBottom","colorDefault","day1","deskNumber","chosenDate","calculatedDate","selectedName","App","dayOffThatWeek","allOff","gap","Math","abs","differenceInCalendarWeeks","difference","getDay","addDays","selectedEntity","fullPerson","deskAllocations","find","x","desk","parseInt","name","calculateDayOff","peopleOff","forEach","person","push","console","log","date","findAll","ThemeProvider","theme","AppBar","position","handleNameSelect","bind","handleDateChosen","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d43e1b7c.chunk.js","sourcesContent":["import React from \"react\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport { FormControl } from \"@material-ui/core\";\nimport './Dropdown.css'\n\nexport default class Dropdown extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {chosenName: ''};\n    }\n    render() {\n        const options = this.props.options;\n        const valKey = this.props.valKey;\n        const displayKey = this.props.displayKey;\n        const handleChange = this.props.handleChange;\n\n        const onChange = name => event => {\n            this.setState({chosenName: event.target.value})\n            handleChange(event.target.value)\n        };\n        return (\n        <>\n        <div className = 'dropdown'> \n            <FormControl fullWidth>\n                <InputLabel htmlFor=\"age-native-simple\">Team Member Name</InputLabel>\n                <Select\n                    native\n                    onChange={onChange()}\n                    value={this.state.chosenName}\n                >\n                <option value=\"\"/>\n                {\n                    options.map(el => <option value={el[valKey]} key={el[valKey]}> {el[displayKey]}</option>)\n                }\n                </Select>\n            </FormControl>\n        </div>\n        </>\n        )\n    } \n}","import React from \"react\";\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { isValid } from 'date-fns'\n\nexport default class DatePicker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {selectedDate: new Date()};\n    }\n    render() {\n        const handleChange = this.props.handleChange;\n        const label = this.props.label;\n        const onChange = event => {\n            if (isValid(event)) {\n                this.setState({selectedDate: event});\n                handleChange(event);\n            }\n        };\n        return (\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <KeyboardDatePicker\n                    disablePast\n                    margin=\"normal\"\n                    id=\"date-picker-dialog\"\n                    label={label}\n                    format=\"dd/MM/yyyy\"\n                    value={this.state.selectedDate}\n                    onChange={onChange}\n                    KeyboardButtonProps={{\n                        'aria-label': 'change date',\n                    }}\n                />\n            </MuiPickersUtilsProvider>\n        );\n    }\n\n}","import { createMuiTheme } from \"@material-ui/core/styles\";\nimport { purple, green } from \"@material-ui/core/colors\";\n\nexport const appBarTheme =  createMuiTheme({\n    palette: {\n      primary: purple,\n      secondary: green,\n    },\n    status: {\n      danger: 'orange',\n    },\n    overrides: {\n      MuiAppBar: {\n        root: {\n          padding: \"0.5rem\",\n          fontWeight: \"bold\",\n          marginBottom: \"10px\",\n        },\n        colorDefault: purple\n      }\n    }\n  });","import React from 'react';\nimport Dropdown from \"./components/Dropdown/Dropdown\";\nimport DatePicker from './components/DatePicker/DatePicker';\nimport AppBar from '@material-ui/core/AppBar';\nimport { appBarTheme } from \"./style/theme\";\nimport './App.css';\nimport deskAllocations from './assets/deskAllocation.json';\nimport { differenceInCalendarWeeks, format, getDay, addDays }  from 'date-fns';\nimport { ThemeProvider } from '@material-ui/styles';\n\nconst offset = 3;\nconst day1 = new Date(2019, 10, 4);\nlet deskNumber = 0;\nlet chosenDate = day1;\nlet calculatedDate = day1\nlet dayOffThatWeek = '';\nlet selectedName = '';\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = { dayOffThatWeek: '', chosenDate: new Date(), allOff: [] };\n  }\n\n  calculateDayOff() {\n    const gap = Math.abs(differenceInCalendarWeeks(day1, chosenDate));\n    dayOffThatWeek = ((deskNumber - 1 + (gap * offset)) % 5);\n    const difference = dayOffThatWeek - (getDay(chosenDate) - 1);\n    calculatedDate = addDays(chosenDate, difference);\n    this.setState({dayOffThatWeek: format(calculatedDate, \"EEEE 'the' do 'of' MMMM yyyy\")})\n  };\n\n  handleNameSelect(selectedEntity) {\n    const fullPerson = deskAllocations.find((x) => x.desk === parseInt(selectedEntity))\n    deskNumber = fullPerson.desk;\n    selectedName = fullPerson.name\n    this.calculateDayOff();\n  }\n\n  findAll() {\n    const peopleOff = [];\n    deskAllocations.forEach((person) => {\n      const gap = Math.abs(differenceInCalendarWeeks(day1, chosenDate));\n      const theirDayOff = ((person.desk - 1 + (gap * offset)) % 5);\n      if (theirDayOff === getDay(chosenDate) - 1) {\n        peopleOff.push(person.name);\n      }\n    })\n    console.log(peopleOff)\n    this.setState({\n      allOff: peopleOff\n    })\n  }\n\n  handleDateChosen(date) {\n    chosenDate = date\n    console.log(chosenDate);\n    this.calculateDayOff();\n    this.findAll();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <ThemeProvider theme={appBarTheme}>\n            <AppBar position=\"fixed\">\n              WFH Schedule\n            </AppBar>\n          </ThemeProvider>\n        </div>\n          <Dropdown options = {deskAllocations} valKey = 'desk' displayKey = 'name' handleChange = {this.handleNameSelect.bind(this)}/>\n          <DatePicker handleChange = {this.handleDateChosen.bind(this)} label = 'Date to check'/>\n        {\n          selectedName && this.state.dayOffThatWeek ? \n          <>\n          <div className='bordered'>\n            <h3>\n              {selectedName}'s WFH day that week is\n            </h3> \n            <h1>\n              { this.state.dayOffThatWeek }\n            </h1> \n          </div>\n          </> : null\n        }\n        {\n          this.state.allOff.length > 0 ?\n          <>\n          <div className='bordered'>\n            <h3>\n              On the {format(calculatedDate, \"EEEE 'the' do 'of' MMMM yyyy\")}: \n            </h3>\n            {this.state.allOff.map(el => <h1 key={el}>{el}</h1>)}\n            <h3>\n              may be working from home\n            </h3>\n          </div>\n          </> : null\n        }\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}